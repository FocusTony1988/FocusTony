<!DOCTYPE html>
<html lang="de">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Image Generator</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            text-align: center;
            padding: 20px;
        }
        input {
            padding: 10px;
            width: 300px;
            margin-bottom: 10px;
        }
        button {
            padding: 10px 20px;
            background-color: #007BFF;
            color: white;
            border: none;
            cursor: pointer;
        }
        button:disabled {
            background-color: #cccccc;
            cursor: not-allowed;
        }
        button:hover:enabled {
            background-color: #0056b3;
        }
        img {
            margin-top: 20px;
            max-width: 100%;
            height: auto;
        }
        #downloadBtn {
            margin-top: 20px;
            padding: 10px 20px;
            background-color: #28a745;
            color: white;
            border: none;
            cursor: pointer;
        }
        #downloadBtn:hover {
            background-color: #218838;
        }
        .captcha-container {
            margin: 20px 0;
        }
    </style>
</head>
<body>
    <h1>AI Image Generator</h1>
    <p>Gib eine Beschreibung ein, um ein Bild zu generieren:</p>
    <input type="text" id="description" placeholder="Beschreibung eingeben...">
    
    <div class="captcha-container">
        <p id="captchaQuestion"></p>
        <input type="text" id="captchaAnswer" placeholder="Ergebnis eingeben...">
    </div>
    
    <button id="generateBtn" onclick="generateImage()">Bild generieren</button>
    <p id="status"></p>
    <img id="generatedImage" alt="Generated Image" style="display: none;">
    <br>
    <button id="downloadBtn" style="display:none;">Bild herunterladen</button>

    <script>
        let intervalId;
        let startTime;
        let imageBlob;
        let captchaCorrectAnswer;

        // Funktion zum Erstellen einer einfachen Captcha-Aufgabe
        function generateCaptcha() {
            const a = Math.floor(Math.random() * 10);
            const b = Math.floor(Math.random() * 10);
            captchaCorrectAnswer = a + b;
            document.getElementById('captchaQuestion').textContent = "Bitte löse folgende Aufgabe: " + a + " + " + b + " = ?";
        }

        async function query(data) {
            const response = await fetch(
                "https://api-inference.huggingface.co/models/black-forest-labs/FLUX.1-dev",
                {
                    headers: {
                        Authorization: "Bearer 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",
                        "Content-Type": "application/json",
                    },
                    method: "POST",
                    body: JSON.stringify(data),
                }
            );
            const result = await response.blob();
            return result;
        }

        async function generateImage() {
            const description = document.getElementById('description').value;
            const status = document.getElementById('status');
            const imageElement = document.getElementById('generatedImage');
            const generateBtn = document.getElementById('generateBtn');
            const downloadBtn = document.getElementById('downloadBtn');
            const userCaptcha = document.getElementById('captchaAnswer').value;

            if (!description) {
                status.textContent = "Bitte eine Beschreibung eingeben.";
                return;
            }

            // Captcha prüfen
            if (parseInt(userCaptcha, 10) !== captchaCorrectAnswer) {
                status.textContent = "Captcha falsch! Bitte erneut versuchen.";
                return;
            }

            // Button blocken
            generateBtn.disabled = true;

            status.textContent = "Bild wird generiert, bitte warten...";
            imageElement.style.display = "none";
            downloadBtn.style.display = "none";

            // Timer starten
            let elapsedSeconds = 0;
            intervalId = setInterval(() => {
                elapsedSeconds++;
                status.textContent = "Bild wird generiert, bitte warten... (" + elapsedSeconds + "s)";
            }, 1000);

            // Zeitmesser Start
            startTime = new Date();

            try {
                imageBlob = await query({ "inputs": description });
                const imageUrl = URL.createObjectURL(imageBlob);

                imageElement.src = imageUrl;
                imageElement.style.display = "block";

                // Download Button konfigurieren
                downloadBtn.style.display = "inline-block";
                downloadBtn.onclick = function() {
                    const a = document.createElement('a');
                    a.href = imageUrl;
                    a.download = "generated_image.png";
                    a.click();
                };

                // Zeit messen
                const endTime = new Date();
                const timeDiff = ((endTime - startTime) / 1000).toFixed(2);

                clearInterval(intervalId);
                status.textContent = "Das Erstellen des Bildes hat " + timeDiff + " Sekunden gedauert.";

            } catch (error) {
                clearInterval(intervalId);
                status.textContent = "Es ist ein Fehler aufgetreten beim Erstellen des Bildes.";
                console.error(error);
            } finally {
                // Button wieder freigeben
                generateBtn.disabled = false;
                // Neues Captcha für das nächste Mal generieren
                generateCaptcha();
                document.getElementById('captchaAnswer').value = '';
            }
        }

        // Beim Laden der Seite Captcha generieren
        window.onload = generateCaptcha;
    </script>
</body>
</html>
